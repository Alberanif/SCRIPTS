# IMPORTANDO AS BIBLIOTECAS
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.datasets import mnist

# TESTE NA GPU
physical_devices = tf.config.list_physical_devices('GPU')
tf.config.experimental.set_memory_growth(physical_devices[0], True)

# CARREGANDO O DATASET
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Verificando as formas antes do reshape
print(f"x_train original shape: {x_train.shape}")
print(f"y_train original shape: {y_train.shape}")

# AGRUPAR O DATASET EM UMA CAMADA
x_train = x_train.reshape(-1, 28*28).astype("float32") / 255.0
x_test = x_test.reshape(-1, 28*28).astype("float32") / 255.0

# Verificando as formas após o reshape
print(f"x_train shape after reshape: {x_train.shape}")
print(f"y_train shape: {y_train.shape}")
print(f"x_test shape after reshape: {x_test.shape}")
print(f"y_test shape: {y_test.shape}")

# CRIANDO AS CAMADAS REDE NEURAL
#model = keras.Sequential()
#model.add(keras.Input(shape=(784,)))
#model.add(layers.Dense(512, activation="relu"))
#model.add(layers.Dense(512, activation="relu"))
#model.add(layers.Dense(10))

inputs = keras.Input(shape=(784,))
x = layers.Dense(512, activation="relu")(inputs)
x = layers.Dense(256, activation="relu")(x)
x = layers.Dense(128, activation="relu")(x)
outputs = layers.Dense(10, activation="softmax")(x)
model = keras.Model(inputs=inputs, outputs=outputs)

model.compile(
    loss = keras.losses.SparseCategoricalCrossentropy(from_logits=False),
    optimizer = keras.optimizers.Adam(learning_rate=0.001),
    metrics=["accuracy"]
)

# TREINAMENTO DO MODELO
model.fit(x_train, y_train, batch_size=32, epochs=5, verbose=2)

# AVALIAÇÃO DO MODELO
model.evaluate(x_test, y_test, batch_size=32, verbose=2)
